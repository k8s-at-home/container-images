name: Base - Build, Test, Push

on:
  workflow_dispatch:
  push:
    branches:
    - main
    paths:
    - 'base/**'
  pull_request:
    paths:
    - 'base/**'

# Detect which folders contain changes
jobs:
  changes:
    name: Get changes
    runs-on: ubuntu-20.04
    outputs:
      matrix: "{\"container\": ${{ steps.reduce.outputs.containers }} }"
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        list-files: json
        filters: |
          changed:
          - 'base/**'
    - run: echo '${{ toJson(steps.filter.outputs) }}' > changes.json
    - id: reduce
      run: |
        CONTAINERS=$(jq --raw-output '.changed_files | fromjson | .[] |= sub("(?<filepath>(?<first_directory>(?<root1>[/]?)[^/]+/)(?<second_directory>(?<root2>[/]?)[^/]+)(?<extra_paths>.+))"; "\(.second_directory)") | unique' changes.json)
        echo ::set-output name=containers::${CONTAINERS}

  hadolint:
    name: hadolint
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v1
    - name: hadolint
      uses: reviewdog/action-hadolint@v1
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        reporter: github-pr-review
        fail_on_error: true

  # lint:
  #   name: Lint
  #   runs-on: ubuntu-20.04
  #   needs: changes
  #   strategy:
  #     matrix: ${{ fromJson(needs.changes.outputs.matrix) }}
  #     fail-fast: true
  #   if: "!contains(github.event.head_commit.message, '[ci-skip]')"
  #   steps:
  #   - uses: brpaz/hadolint-action@v1.2.1
  #     with:
  #       dockerfile: ./base/${{ matrix.container }}/Dockerfile

  build:
    name: Build
    runs-on: ubuntu-20.04
    needs:
    - lint
    - changes
    strategy:
      matrix: ${{ fromJson(needs.changes.outputs.matrix) }}
      fail-fast: false
    if: "!contains(github.event.head_commit.message, '[ci-skip]')"
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Define if tests and push should be run against which versions/platforms
    - name: Prepare
      id: prep
      run: |
        VERSION=$(cat ./base/${{ matrix.container }}/VERSION)
        echo ::set-output name=version::${VERSION}
        PLATFORM=$(cat ./base/${{ matrix.container }}/PLATFORM)
        echo ::set-output name=platform::${PLATFORM}
        # PR?
        if [ "${{github.event_name}}" == "pull_request" ]; then
          echo ::set-output name=push::false
        else
          echo ::set-output name=push::true
        fi

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
      with:
        platforms: all

    - name: Login to GHCR
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ secrets.GHCR_USERNAME }}
        password: ${{ secrets.GHCR_TOKEN }}

    # Install and configure Buildx
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1
      with:
        install: true
        version: latest
        driver-opts: image=moby/buildkit:master

    # Make sure we can store buildx cache in-between builds
    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    # Push if not a PR, otherwise just test the build process for all requested platforms
    - name: Build and Push
      uses: docker/build-push-action@v2
      with:
        build-args: VERSION=${{ steps.prep.outputs.version }}
        context: .
        platforms: ${{ steps.prep.outputs.platform }}
        file: ./base/${{ matrix.container }}/Dockerfile
        push: ${{ steps.prep.outputs.push }}
        tags: |
          ghcr.io/${{ github.repository_owner }}/${{ matrix.container }}:latest
          ghcr.io/${{ github.repository_owner }}/${{ matrix.container }}:${{ steps.prep.outputs.version }}
